syntax = "proto3";

package zkp_material;

message MaterialRequest {
  // user is the user id
  string user = 1;

  // q is the prime order of the group.
  //
  // The prime order is optional because of the following reasons:
  //
  // 1. If it is present it tries to generate using that prime order if it is valid
  // 2. If it is not present it tries to generate using a random prime order
  optional int64 q = 2;
  optional int64 p = 3;
}

message MaterialResponse {
  int64 g = 2;
  int64 h = 3;
  int64 q = 4;
  int64 p = 5;
}

message QueryRequest {
  string user = 1;
}

service Material {

  // Generate generates a new material for the user id
  // The material is a pair of integers (g, h) such that g and h are generator of the same group with
  // prime order q. The group is defined by the user id.
  //
  // If the user id already exists it returns the same material.
  //
  // Possible Errors:
  //
  // - InvalidArgument: If q is not a prime number
  // - AlreadyExists: If the user id already exists
  rpc Generate(MaterialRequest) returns (MaterialResponse) {}


  // Get returns the material for the user id
  //
  // Possible Errors:
  // - NotFound: If the user id does not exist
  rpc Get(QueryRequest) returns (MaterialResponse) {}


}

