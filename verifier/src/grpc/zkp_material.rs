// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaterialRequest {
    /// user is the user id
    #[prost(string, tag = "1")]
    pub user: ::prost::alloc::string::String,
    /// q is the prime order of the group.
    ///
    /// The prime order is optional because of the following reasons:
    ///
    /// 1. If it is present it tries to generate using that prime order if it is valid
    /// 2. If it is not present it tries to generate using a random prime order
    #[prost(int64, optional, tag = "2")]
    pub q: ::core::option::Option<i64>,
}
impl ::prost::Name for MaterialRequest {
    const NAME: &'static str = "MaterialRequest";
    const PACKAGE: &'static str = "zkp_material";
    fn full_name() -> ::prost::alloc::string::String {
        "zkp_material.MaterialRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/zkp_material.MaterialRequest".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MaterialResponse {
    #[prost(int64, tag = "2")]
    pub g: i64,
    #[prost(int64, tag = "3")]
    pub h: i64,
}
impl ::prost::Name for MaterialResponse {
    const NAME: &'static str = "MaterialResponse";
    const PACKAGE: &'static str = "zkp_material";
    fn full_name() -> ::prost::alloc::string::String {
        "zkp_material.MaterialResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/zkp_material.MaterialResponse".into()
    }
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRequest {
    #[prost(string, tag = "1")]
    pub user: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryRequest {
    const NAME: &'static str = "QueryRequest";
    const PACKAGE: &'static str = "zkp_material";
    fn full_name() -> ::prost::alloc::string::String {
        "zkp_material.QueryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/zkp_material.QueryRequest".into()
    }
}
/// Generated client implementations.
pub mod material_client {
    #![allow(unused_variables, dead_code, missing_docs, clippy::let_unit_value)]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct MaterialClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl MaterialClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> MaterialClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> MaterialClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + Send + Sync,
        {
            MaterialClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Generate generates a new material for the user id
        /// The material is a pair of integers (g, h) such that g and h are generator of the same group with
        /// prime order q. The group is defined by the user id.
        ///
        /// If the user id already exists it returns the same material.
        ///
        /// Possible Errors:
        ///
        /// - InvalidArgument: If q is not a prime number
        /// - AlreadyExists: If the user id already exists
        pub async fn generate(
            &mut self,
            request: impl tonic::IntoRequest<super::MaterialRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MaterialResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zkp_material.Material/Generate",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("zkp_material.Material", "Generate"));
            self.inner.unary(req, path, codec).await
        }
        /// Get returns the material for the user id
        ///
        /// Possible Errors:
        /// - NotFound: If the user id does not exist
        pub async fn get(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::MaterialResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::new(
                        tonic::Code::Unknown,
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/zkp_material.Material/Get",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new("zkp_material.Material", "Get"));
            self.inner.unary(req, path, codec).await
        }
    }
}
